@rendermode InteractiveServer
<div @onclick="@HandleSetAside" class="absolute top-2 btn btn-ghost h-2 aspect-square sm:hidden">
    <span class="material-symbols-outlined">
        menu
    </span>
</div>
<aside id="sidebar-multi-level-sidebar" class="z-20 bg-accent border-r-2 border-r-neutral fixed top-[3.89rem] left-0 w-64 h-screen transition-transform @(isOpen ? "translate-x-0" : "-translate-x-full sm:translate-x-0")" aria-label="Sidebar">
    <div class="h-full px-3 py-4 overflow-y-auto">
        <ul class="space-y-2 font-medium">
            <AsideButton IsActive=@(currentWebsite == "" || currentWebsite == "home") Icon="home" Name="home" OnSetAside="@HandleSetAside" />
            <AsideButton IsActive=@(currentWebsite == "qot") Icon="help" Name="qot" OnSetAside="@HandleSetAside" />
        </ul>
    </div>
</aside>
<div class="top-16 fixed  w-full h-full z-10 bg-neutral-content sm:hidden  transition-opacity @(isOpen ? "opacity-80" : "opacity-0 hidden")"></div>


@code{

    [Inject] public NavigationManager Manager { get; set; } = null!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = null!;

    private string currentWebsite { get; set; } = "";
    private bool isOpen { get; set; }

    private void HandleNewLocation(object? sender, LocationChangedEventArgs e)
    {
        currentWebsite = Manager.Uri[Manager.BaseUri.Length..];
        StateHasChanged();
    }

    protected override void OnInitialized()
        => Manager.LocationChanged += HandleNewLocation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addSwipeListener",
                DotNetObjectReference.Create(this), nameof(OnSwipe));
        }
    }

    private void HandleSetAside()
    {
        isOpen = !isOpen;
        StateHasChanged();
    }


    [JSInvokable]
    public void OnSwipe(string direction)
    {
        switch (direction)
        {
            case "left":
                isOpen = true;
                break;
            case "right":
                isOpen = false;
                break;
        }

        StateHasChanged();
    }

}