@using DarkBot.Services
@using DarkBot.Models
<div class="card h-full bg-base-200 border-2 border-neutral">
    <div class="card-body w-full flex flex-col gap-4">

        @if (users is null)
        {
            <p>loading</p>
        }
        else
        {
            <span class="font-bold text-2xl flex items-center gap-2">
                <span class="material-symbols-outlined mt-1">
                    chat_bubble
                </span>
                <span>
                    Replies
                </span>
            </span>
            <table class="flex flex-col gap-4">
                @foreach (var user in users)
                {
                    <tr class="w-full flex justify-between">
                        <td>
                            <div class="flex items-center gap-3">
                                <div class="avatar">
                                    <div class="mask mask-squircle w-12 h-12">
                                        <img src="@($"https://cdn.discordapp.com/avatars/{user.Id}/{user.Avatar}")" alt={user.GlobalName}/>
                                    </div>
                                </div>
                                <div>
                                    <div class="font-bold">@user.GlobalName</div>
                                    <div class="text-sm opacity-50">@user.Username</div>
                                </div>
                            </div>
                        </td>
                        <th>
                            <button @onclick="@(() => HandleRemoveUser(user.Id))" class="btn btn-primary text-2xl text-primary-content">
                                <span class="material-symbols-outlined">
                                    delete
                                </span>
                            </button>
                        </th>
                    </tr>
                }

            </table>
        }
    </div>
</div>

@code{

    [Inject] public QotService Service { get; set; } = null!;
    [Inject] public NavigationManager Manager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    private List<UserModel>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await Service.GetReplies();
    }

    private async Task HandleRemoveUser(string id)
    {
        var result = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (!result)
            return;

        await Service.RemoveReply(id);
        Manager.Refresh(true);
    }

}